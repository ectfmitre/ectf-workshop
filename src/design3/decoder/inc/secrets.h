#ifndef __SECRETS_H__
#define __SECRETS_H__

#include <cstdint>
#include <string_view>
#include <vector>
#include "keys.h"
#include "types.h"

namespace ectf {

// Utility class used to decrypt the secret information stored inside the
// decoder firmware.
class SecretData {
private:
	DeviceID decoder_id_;

	// Keys used to decode channel 0
	EdPublicKey channel0_public_key_;
	ChaChaKey channel0_symmetric_key_;

	// Keys used to decode subscription messages
	EdPublicKey subscription_public_key_;
	ChaChaKey subscription_symmetric_key_;
public:
	SecretData() {}
	~SecretData() {}
	// Loads all the firmware secrets, using the key returned by GetFlashKey()
	// and initialization vector returned by GetFlashIV() to decrypt data
	// returned by GetFlashSecretData().
	void Load();

	DeviceID GetDecoderID() const { return decoder_id_; }
	const EdPublicKey& GetChannel0PublicKey() const { return channel0_public_key_; }
	const ChaChaKey& GetChannel0SymmetricKey() const { return channel0_symmetric_key_; }
	const EdPublicKey& GetSubscriptionPublicKey() const { return subscription_public_key_; }
	const ChaChaKey& GetSubscriptionSymmetricKey() const { return subscription_symmetric_key_; }
};

// These functions are generated by codegen.py while building the decoder
// firmware (see entry point in Dockerfile) using data from global.secrets
// and the decoder ID.
extern std::string_view GetFlashKey();
extern std::string_view GetFlashIV();
extern std::string_view GetFlashSecretData();

}

#endif // __SECRETS_H__
